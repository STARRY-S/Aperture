/**
 * @author STARRY-S (hxstarrys@gmail.com)
 * @brief Audio implemention for Aperture based on OpenAL, ALUT
 *
 * @copyright Copyright (c) 2022 Apache - 2.0
 */
#ifndef AP_AUDIO_H
#define AP_AUDIO_H

#include "ap_utils.h"

/**
 * Audio types supported by ap_audio
 */
typedef enum {
        AP_AUDIO_FMT_UNKNOWN = 0,
        AP_AUDIO_FMT_U8,                // unsigned 8 bits
        AP_AUDIO_FMT_S16,               // signed 16 bits
        AP_AUDIO_FMT_S32,               // signed 32 bits
        AP_AUDIO_FMT_S64,               // signed 64bit
        AP_AUDIO_FMT_FLT,               // float
        AP_AUDIO_FMT_DBL,               // double
        AP_AUDIO_FMT_LENGTH
} AP_Audio_FMT;

/**
 * Audio struct definition
 */
struct AP_Audio {
        // audio id
        unsigned int id;
        // name of the audio file, use this to avoid reopen/redecode audios
        char *name;
        // the PCM audio data loaded into the memory
        char *data;
        // data size
        int data_size;

        // channels: 1 (mono) or 2 (setro)
        int channels;
        // format: format of the PCM audio, should be AP_Audio_FMT
        int format;
        // frequency: e.g. 44100.0Hz
        float frequency;
        // the buffer id generated by OpenAL
        unsigned int buffer_id;

        // callback function if play audio in asynchronized
        ap_callback_func_t cb;
};

int ap_audio_init();

/**
 * @brief Generate a buffer from WAV file,
 * based on 'alutLoadMemoryFromFile'.
 *
 * @param name filename
 * @return unsigned int buffer id
 */
unsigned int ap_audio_load_buffer_WAV(const char* name);

/**
 * @brief Generate a buffer from memory.
 * You need to specify its format and frequency manually.
 *
 * @param memory    pointer points to data loaded in memory
 * @param size      size of data
 * @param format    should be AL_FORMAT_XXX
 * @param frequency default is 44100.0f
 * @return unsigned int buffer_id
 */
unsigned int ap_audio_load_buffer_memory(
        const char* memory, int size, int format, float frequency);

int ap_audio_play_buffer_sync(unsigned int buffer, int loop);

int ap_audio_play_buffer(unsigned int buffer);

int ap_audio_delete_buffer(unsigned int buffer);

int ap_audio_finish();

/**
 * @brief open a WAV format audio file and decode it into PCM format data
 * by using ALUT.
 *
 * @param filename
 * @param out_audio_p [out] pointer points to the pointer of struct AP_Audio
 * @return int AP_Types
 */
int ap_audio_open_file_WAV(const char* filename, struct AP_Audio **out_audio_p);

/**
 * @brief open a audio file and decode it to PCM format by using libavcodec
 *
 * @param filename
 * @param out_audio_p [out] pointer points to the pointer of struct AP_Audio
 * @return int AP_Types
 */
int ap_audio_open_file_decode(
        const char* filename, struct AP_Audio **out_audio_p);

#endif