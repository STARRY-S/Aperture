/**
 * @author STARRY-S (hxstarrys@gmail.com)
 * @brief Audio implemention for Aperture based on OpenAL, ALUT
 *
 * @copyright Copyright (c) 2022 Apache - 2.0
 */
#ifndef AP_AUDIO_H
#define AP_AUDIO_H

#include "ap_utils.h"

/**
 * Audio types supported by ap_audio
 */
typedef enum {
        AP_AUDIO_FMT_UNKNOWN = 0,
        AP_AUDIO_FMT_U8,                // unsigned 8 bits
        AP_AUDIO_FMT_S16,               // signed 16 bits
        AP_AUDIO_FMT_S32,               // signed 32 bits
        AP_AUDIO_FMT_S64,               // signed 64bit
        AP_AUDIO_FMT_FLT,               // float
        AP_AUDIO_FMT_DBL,               // double
        AP_AUDIO_FMT_LENGTH
} AP_Audio_FMT;

/**
 * Audio struct definition
 */
struct AP_Audio {
        // audio id
        unsigned int id;
        // name of the audio file, use this to avoid reopen/redecode audios
        char *name;
        // the PCM audio data loaded into the memory
        char *data;
        // data size
        int data_size;

        // channels: 1 (mono) or 2 (setro)
        int channels;
        // format: format of the PCM audio, should be AP_Audio_FMT
        int format;
        // frequency: e.g. 44100.0Hz
        float frequency;
        // the source id generated by OpenAL
        unsigned int source_id;

        // callback function if play audio in asynchronized
        ap_callback_func_t cb;
};

int ap_audio_fmt_ap_2_al(int ap_audio_fmt, int channel);
int ap_audio_fmt_av_2_ap(int av_fmt, const char *s);
int ap_audio_fmt_al_2_ap(int al_fmt);

/**
 * @brief Initialize OpenAL, create OpenAL Context
 * @return AP_Types
 */
int ap_audio_init();

/**
 * @brief Close OpenAL device, destroy context.
 * @return AP_Types
 */
int ap_audio_finish();

int ap_audio_load_MP3(const char *name, unsigned int *id);

int ap_audio_load_WAV(const char *name, unsigned int *id);

int ap_audio_play(unsigned int id, ap_callback_func_t cb);

int ap_audio_pause(unsigned int id);

int ap_audio_stop(unsigned int id);

#endif